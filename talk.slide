Go in a nutshell
an introduction to the go programming language
8 Jan 2014
Tags: golang, concurrency

Adam Vincze
Engineer, ideas

@advincze

* the structure of this talk

- overview
- history, language evolution
- example 
- go the language
- workflow /tools (go get, fmt, run, build install, )
- go projects


* go in a nutshell

* go in a nutshell - Design of Go

- Efficiency
- Safety
- Concurrency
- Scalability
- Fast development cycle
- A cute mascot

* go in a nutshell - the gopher

.image images/gopher_search.png

* go in a nutshell - What is Go?

Features:

- Native code generation (compiled)
- Statically (and "strongly") typed 
- Not really object oriented, very much oriented on objects
- Composition via interfaces (Duck Typing)
- Memory safe
- Garbage collected
- Native concurrency support (yey multicores)
- Excellent standard library
- Great tools

* background / history

* go history

[[http://talks.golang.org/2012/go1.slide][talk rob: go v1.0]]

- Google 20% project in late 2007
- Language designed by programmers (vs academia)
- by Rob Pike, Ken Thompson, Robert Griesemer (Bell labs, Unix, Plan9, Java)
- Released as an open source project in November 2009.
- v1.0 2012-03
- v1.1 2013-04
- v1.2 2013-12
- planned: 2 releases / year 

* go principles

- Code review central to the project. 
.link https://codereview.appspot.com
- "Discuss first, code later" 
- part of the ecellent go toolchain:
- Gofix automates updates for backward-incompatible changes. 

* hello Go

.play hello.go

build

	cd hello/
	*go* build
run

	./hello 

* The go tool

[[http://golang.org/]]

Installation: Download go (osx, linux, windows, etc)

A complete build, test, and install tool for Go programs.
Some realistic examples:

	$ go run hello.go       # Compile-and-go. (Ha!).
	$ go build package      # Build everything in directory (and deps).
	$ go install            # Install everything in dir and (and deps).
	$ go test archive/zip   # Compile and run unit tests for package.

The go tool also wraps gofmt, gofix, etc.:

	$ go fmt                # Run gofmt on package in current dir.
	$ go fix                # Run gofix on package in current dir.


* go language

http://golang.org/ref/spec

* packages
	
	bin/
	    streak                         # command executable
	    todo                           # command executable
	src/
	    code.google.com/p/goauth2/
	        oauth/
	            oauth.go               # package code.google.com/p/goauth2/oauth
	            oauth_test.go          # package code.google.com/p/goauth2/oauth
	    github.com/nf/
	        streak/
	            oauth.go               # package main
	            streak.go              # package main
	        todo/
	            task/
	                task.go            # package github.com/nf/task
	            todo.go                # package main

* func, var, type


* runes



* structs

 access levels (Exported/non Exported) == public package private
 pointers vs values 
 pass by reference(maps, slices, channels)

* interfaces

Duck typing




* go != java

- declaration reversed

	var i int 
	i = 5

	var j = 5

	k := 5

- function types
- multiple assignment
- blank identifier
- zero values
- oop
- nil is the new null
- no function overloading
- no implicit type conversion
- instead of exceptions , go uses errors and panic/recover
- methods on any type, no boxing required
- pointers vs Values
- defer

* formatting

- part of the language






* Learn more

The Go web site has a huge amount of documentation:

.link http://golang.org

Learn Go from a web browser:

.link http://tour.golang.org

Google Code project:

.link http://code.google.com/p/go

* some projects using go

- [[https://www.docker.io/][docker]]
- [[http://www.packer.io/][packer]]
- [[http://www.serfdom.io/][serf]]
- [[https://juju.ubuntu.com/][canonical/juju]]
- [[http://heka-docs.readthedocs.org/en/latest/][mozilla/heka]]
- google download servers: dl.google.com
- backend@[[https://soundcloud.com/][SoundCloud]]
- backend@[[https://www.wunderlist.com/][Wunderlist]]
- [[http://www.iron.io/][ironMQ]]
- [[http://camlistore.org/][calimstore]], [[https://github.com/ha/doozerd][doozerd]], ...

.link https://code.google.com/p/go-wiki/wiki/Projects

* links used

official go presentations:

.link http://talks.golang.org/

other presentations:

.link http://www.nada.kth.se/~snilsson/go_for_java_programmers





* the go present tool

.link http://godoc.org/code.google.com/p/go.tools/present present tool .slide file syntax

this presentation: 

.link http://go-talks.appspot.com/github.com/advincze/go-talks/talk.slide 



* links

search tip: search for "golang" instead of "go"

.link https://groups.google.com/forum/#!forum/golang-nuts gGroup golang-nuts

.link http://www.meetup.com/golang-users-berlin/events/159374622/ golang meetup with NG on 2014-02-04

twitter 

.link https://twitter.com/golang_news @golang_news
