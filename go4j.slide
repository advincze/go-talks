Go for Javaistas
an introduction to go
8 Jan 2014
Tags: golang, concurrency

Adam Vincze
Engineer, ideas

@advincze

* the structure of this talk

- overview
- background / history
- go workflow (platforms, )
- An example teaser (web server ex)
- go the language
- go vs java
- tools (go get, fmt, run, build install, )
- go projects
- go language evolution

* overview

* overview - Design of Go

- Efficiency
- Safety
- Concurrency
- Scalability
- Fast development cycle
- A cute mascot

* the gopher

.image images/gopher_search.png

* overview - What is Go?

Features:

- Native code generation (compiled)
- Statically typed
- Composition via interfaces
- Memory safe
- Garbage collected
- Native concurrency support
- Excellent standard library
- Great tools

* background / history

* go history

[[http://talks.golang.org/2012/go1.slide][talk rob: go v1.0]]

- Google 20% project in late 2007
- Language designed by programmers (vs academia)
- by Rob Pike, Ken Thompson, Robert Griesemer (Bell labs, Unix, Plan9, Java)
- Released as an open source project in November 2009.
- v1.0 2012-03
- v1.1 2013-04
- v1.2 2013-12
- planned: 2 releases / year 

* go history

- Code review central to the project.
- "Discuss first, code later" 
- Gofix automates updates for backward-incompatible changes. 
- part of the ecellent go toolchain

* The go tool

[[http://golang.org/]]

Installation: Download go (osx, linux, windows, etc)

A complete build, test, and install tool for Go programs.
Some realistic examples:

	$ go run hello.go       # Compile-and-go. (Ha!).
	$ go build package      # Build everything in directory (and deps).
	$ go install            # Install everything in dir and (and deps).
	$ go test archive/zip   # Compile and run unit tests for package.

The go tool also wraps gofmt, gofix, etc.:

	$ go fmt                # Run gofmt on package in current dir.
	$ go fix                # Run gofix on package in current dir.

* go tool on remote repositories

The go tool automates installation of remote packages.

Packages are addressed by import strings. 
Import strings are just source repository URLs. 
Go tool downloads and installs all dependencies, transitively.

	$ go get code.google.com/p/myrepo/mypackage

Installs my package, plus any remote dependencies it may have. 
And to use the package in Go source:

	import "code.google.com/p/myrepo/mypackage"

The tool can even run gofix as it installs:

	$ go get -fix code.google.com/p/myrepo/mypackage

* hello Go

.play hello.go

* go example

.code /stack/stack.go 

* go example

* go language

* go == java

- packages
- structs 
- interfaces
- access levels (Exported/non Exported) == public package private
- pass by reference(maps, slices, channels)

* go != java

- declaration reversed

	var i int 
	i = 5

	var j = 5

	k := 5

- function types
- multiple assignment
- blank identifier
- zero values
- oop
- nil is the new null
- no function overloading
- no implicit type conversion
- instead of exceptions , go uses errors and panic/recover
- methods on any type, no boxing required
- pointers vs Values
- defer

* formatting

- part of the language

* Learn more

The Go web site has a huge amount of documentation:

.link http://golang.org

Learn Go from a web browser:

.link http://tour.golang.org

Google Code project:

.link http://code.google.com/p/go

* links i used

official go presentations:

.link http://talks.golang.org/

other presentations:

.link http://www.nada.kth.se/~snilsson/go_for_java_programmers


the go present tool

.link http://godoc.org/code.google.com/p/go.tools/present present tool .slide file syntax
.link http://go-talks.appspot.com/github.com/advincze/go-talks/go4j.slide
